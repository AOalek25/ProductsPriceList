@page "/pricelist"
@using ExcelService
@using ProductLibrary
@using ProductLibrary.Exceptions
@using ProductLibrary.Model
@using System.IO

@inject ProductRepo repo
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Прайс-лист продуктов</PageTitle>

<h1>Прайс-лист продуктов</h1>

@if (repo == null)
{
  <p><em>Loading...</em></p>
}
else
{  
   <a href="readinputdialog" class="btn btn-primary">Найти</a>
   <a href="addinputdialog" class="btn btn-primary">Добавить</a>      
   <button class="btn btn-primary" @onclick="Delete">Удалить</button>
   <button class="btn btn-primary" @onclick="()=>OnInitializedAsync()">Весь список</button>
   <button class="btn btn-primary" @onclick="SortByName">Сортировать по названию</button>
   <button class="btn btn-primary" @onclick="SortByPrice">Сортировать по цене</button>
   <p></p>
   <WebService.Pages.UploadFile @ref="Modal"></WebService.Pages.UploadFile>
  <button class="btn btn-primary" @onclick="() => Modal.Open(false)">Загрузить новый файл</button>
  <button class="btn btn-primary" @onclick="() => Modal.Open(true)">Отчет об измененнии цен</button>
   <button class="btn btn-primary" @onclick="PrintPriceTags">Файл с ценниками</button>
     
  <table class="table">
    <thead>
      <tr>
        <th>Идентификатор</th>        
        <th>Наименование</th>
        <th>Производитель</th>
        <th>Цена</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var product in list)
      {
        <tr>
          <td>@product.Id</td>          
          <td>@product.Name</td>
          <td>@product.Manufacturer</td>
          <td>@product.Price</td>
        </tr>
      }
    </tbody>
  </table>
      
}

@code {
  private WebService.Pages.UploadFile Modal { get; set; }  

  public string id="";  
  public string name = "";
  public string manufacturer = "";
  public decimal price;  
  ExcelService excelService = new(ExcelServiceConstants.BlazorData);
  List<Product> list = new();

  protected override async Task OnInitializedAsync()
  {
    repo.Clear();
    foreach (var item in excelService.LoadFromFile(ExcelServiceConstants.BlazorData))
      repo.Create(item);
    list = repo.GetAll().ToList();
    await Task.CompletedTask;
  }

  internal async Task PrintAll()
  { 
    await OnInitializedAsync();
  }

  internal async Task Delete()
  {
    repo.delete = true;
    this.NavigationManager.NavigateTo("/readinputdialog");
  }
  
  internal async Task SortByName()
  {
    await excelService.SaveToFileAsync(repo.SortedByName(), ExcelServiceConstants.BlazorData);
    await OnInitializedAsync();
  }

  internal async Task SortByPrice()
  {
    await excelService.SaveToFileAsync(repo.SortedtByPrice(), ExcelServiceConstants.BlazorData);
    await OnInitializedAsync();
  }

  internal async Task PrintPriceTags()
  {
    await excelService.PrintAllPriceTagsAsync(repo.GetAll(), ExcelServiceConstants.BlazorData);
    var fileStream = File.OpenRead("Data/PriceTags.xlsx");
    using var streamRef = new DotNetStreamReference(stream: fileStream);
    await JS.InvokeVoidAsync("downloadFileFromStream", ExcelServiceConstants.PriceTagsFileName, streamRef);
   }
  
}