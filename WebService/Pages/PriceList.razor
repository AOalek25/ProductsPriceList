@page "/pricelist"
@using ExcelService
@using ProducstLibrary
@using ProducstLibrary.Exceptions
@using ProducstLibrary.Model

@inject ProductsRepo<IProduct> repo

<PageTitle>Прайс-лист продуктов</PageTitle>

<h1>Прайс-лист продуктов</h1>

@if (repo == null)
{
  <p><em>Loading...</em></p>
}
else
{  
   <button class="btn btn-primary" @onclick="Read">Find</button>  
   <a href="inputdialog" class="btn btn-primary">Create</a>  
   <button class="btn btn-primary" @onclick="Delete">Delete</button>
   <button class="btn btn-primary" @onclick="PrintAll">PrintAll</button>
   <button class="btn btn-primary" @onclick="SortByName">SortByName</button>
   <button class="btn btn-primary" @onclick="SortByPrice">SortByPrice</button>
   <p></p>
   <WebService.Pages.Modal @ref="Modal"></WebService.Pages.Modal>   
   <button class="btn btn-primary" @onclick="() => Modal.Open()">Load new file</button>
   <button class="btn btn-primary" @onclick="GenerateReportChangedPrices">Show changed prices</button>
   <button class="btn btn-primary" @onclick="PrintPricetags">Price tags</button>
     
  <table class="table">
    <thead>
      <tr>
        <th>Идентификатор</th>
        <th>тип</th>
        <th>Наименование</th>
        <th>Производитель</th>
        <th>Цена</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var product in list)
      {
        <tr>
          <td>@product.PrintId()</td>
          <td>@product.PrintType()</td>
          <td>@product.Name</td>
          <td>@product.Manufacturer</td>
          <td>@product.PrintPrice()</td>
        </tr>
      }
    </tbody>
  </table>
    
}

@code {
  private WebService.Pages.Modal Modal { get; set; }

  public Guid id;
  public string typeName = "";
  public string name = "";
  public decimal price;
  public string manufacturer = "";
  ExcelService<IProduct> excelService = new("");
  List<IProduct> list = new();

  protected override Task OnInitializedAsync()
  {
    repo.Clear();
    foreach (var item in excelService.LoadFromFile("Data/"))
      repo.Create(item);
    list = repo.GetAll().ToList();
    return Task.Delay(0);
  }

  internal void Read()
  { 
    if (ReadStringNotValid(name)) { throw new ArgumentException(); return; }
    if (ReadStringNotValid(manufacturer)) { throw new ArgumentException(); return; }
    try
    {
      var item = repo.Read(name, manufacturer);
      list.Clear();
      list.Add(item);
    }
    catch (ProductNotFoundException ex)
    {   }
  }

  internal void PrintAll()
  { 
    OnInitializedAsync();
  }

  internal void Add()
  {
    if (ReadStringNotValid(typeName)) { throw new ArgumentException();   return; }
    if (ReadStringNotValid(name)) { throw new ArgumentException(); return; }
    if (ReadStringNotValid(manufacturer)) { throw new ArgumentException(); return; }
    foreach (var registeredType in repo.GetRegisteredTypes())
      if (this.typeName.Equals(registeredType.Key, StringComparison.CurrentCultureIgnoreCase))
      {
        try
        {
          var obj = Activator.CreateInstance(registeredType.Value, new object[] { name, manufacturer, price });
          repo.Create((IProduct)obj);
          excelService.SaveToFile(repo.GetAll(), "Data/",  ExcelServiceConstants.DefaultPriceListSheetName);          
        }
        catch (ProductNotFoundException ex)
        { }
      }
    OnInitializedAsync();
  }

  internal void Delete()
  { 
    if (ReadStringNotValid(name)) { throw new ArgumentException(); return; }
    if (ReadStringNotValid(manufacturer)) { throw new ArgumentException(); return; }
    try
    {
      repo.Delete(name, manufacturer);
      excelService.SaveToFile(repo.GetAll(), "Data/", ExcelServiceConstants.DefaultPriceListSheetName);
    }
    catch (ProductNotFoundException ex)
    {   }
    OnInitializedAsync();
  }

  static bool ReadStringNotValid(string param)
  {    
    if (string.IsNullOrEmpty(param))
      return true;
    else return false;
  }

  internal void SortByName()
  {
    excelService.SaveToFile(repo.SortedByName(), "Data/", ExcelServiceConstants.DefaultPriceListSheetName);
    OnInitializedAsync();
  }

  internal void SortByPrice()
  {
    excelService.SaveToFile(repo.SortedtByPrice(), "Data/", ExcelServiceConstants.DefaultPriceListSheetName);
    OnInitializedAsync();
  }

  internal void LoadNewFile()
  {

  }

  internal void GenerateReportChangedPrices()
  {

  }

  internal void PrintPricetags()
  {
    
  }

  private void LoadFiles(InputFileChangeEventArgs e)
    {
         //await using FileStream fs = new(path, FileMode.Create);
        // await browserFile.OpenReadStream().CopyToAsync(fs);
        
    }

}