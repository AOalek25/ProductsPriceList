@page "/pricelist"
@using ExcelService
@using ProductLibrary
@using ProductLibrary.Exceptions
@using ProductLibrary.Model
@using System.IO

@inject ProductRepo repo
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Прайс-лист продуктов</PageTitle>

<h1>Прайс-лист продуктов</h1>

@if (repo == null)
{
  <p><em>Loading...</em></p>
}
else
{  
   <a href="findinputdialog" class="btn btn-primary">Найти</a>
   <a href="addinputdialog" class="btn btn-primary">Добавить</a>
   <a href="deleteinputdialog" class="btn btn-primary">Удалить</a>      
   <button class="btn btn-primary" @onclick="SortByName">Сортировать по названию</button>
   <button class="btn btn-primary" @onclick="SortByPrice">Сортировать по цене</button>
   <p></p>
   <WebService.Pages.UploadFile @ref="Modal"></WebService.Pages.UploadFile>
   <button class="btn btn-primary" @onclick="() => Modal?.UploadNewFile()">Загрузить новый файл</button>
   <button class="btn btn-primary" @onclick="() => Modal?.GenerateReport()">Отчет об измененнии цен</button>
   <button class="btn btn-primary" @onclick="PrintPriceTags">Файл с ценниками</button>
     
  <table class="table">
    <thead>
      <tr>
        <th>Идентификатор</th>        
        <th>Наименование</th>
        <th>Производитель</th>
        <th>Цена</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var product in list)
      {
        <tr>
          <td>@product.Id</td>          
          <td>@product.Name</td>
          <td>@product.Manufacturer</td>
          <td>@product.Price</td>
        </tr>
      }
    </tbody>
  </table>
      
}

@code {
  private WebService.Pages.UploadFile? Modal { get; set; }  
  public string id="";  
  public string name = "";
  public string manufacturer = "";
  public decimal price;  
  ExcelService excelService = new(ExcelServiceConstants.BlazorData);
  List<Product> list = new();

  protected override async Task OnInitializedAsync()
  {
    repo.Clear();
    try
    {
      var listFromfile = excelService.LoadFromFile(ExcelServiceConstants.BlazorData);
      repo.AddRange(listFromfile);
    }
    catch (IOException ex)
    { }    
    list = repo.GetAll().ToList();
    await Task.CompletedTask;
  }

  internal async Task SortByName()
  {
    try
    {
      await excelService.SaveToFileAsync(repo.SortedByName(), ExcelServiceConstants.BlazorData);
    }
    catch (IOException ex)
    { }
    await OnInitializedAsync();
  }

  internal async Task SortByPrice()
  {
    try
    {
      await excelService.SaveToFileAsync(repo.SortedtByPrice(), ExcelServiceConstants.BlazorData);
    }
    catch (IOException ex)
    { }
    await OnInitializedAsync();
  }

  internal async Task PrintPriceTags()
  {
    try
    {
      await excelService.PrintAllPriceTagsAsync(repo.GetAll(), ExcelServiceConstants.BlazorData);
      var fileStream = File.OpenRead("Data/PriceTags.xlsx");
      using var streamRef = new DotNetStreamReference(stream: fileStream);
      await JS.InvokeVoidAsync("downloadFileFromStream", ExcelServiceConstants.PriceTagsFileName, streamRef);
    }
    catch (IOException ex)
    { }    
   }  
}