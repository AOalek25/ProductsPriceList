@page "/pricelist"
@using ProductLibrary
@using ProductLibrary.Exceptions
@using ProductLibrary.Model
@using System.IO
@using SQLService

@inject ProductRepo productRepo
@inject ManufacturerRepo manufacturerRepo
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Прайс-лист продуктов</PageTitle>

<h1>Прайс-лист продуктов</h1>

@if (productRepo == null)
{
  <p><em>Loading...</em></p>
}
else
{  
   <a href="findinputdialog" class="btn btn-primary">Найти</a>
   <a href="addinputdialog" class="btn btn-primary">Добавить</a>
   <a href="deleteinputdialog" class="btn btn-primary">Удалить</a>      
   <button class="btn btn-primary" @onclick="SortByName">Сортировать по названию</button>
   <button class="btn btn-primary" @onclick="SortByPrice">Сортировать по цене</button>
   <p></p>
   <WebService.Pages.UploadFile @ref="_modal"></WebService.Pages.UploadFile>
   <button class="btn btn-primary" @onclick="() => _modal?.UploadNewFile()">Загрузить новый файл</button>
   <button class="btn btn-primary" @onclick="() => _modal?.GenerateReport()">Отчет об измененнии цен</button>
   <button class="btn btn-primary" @onclick="PrintPriceTags">Файл с ценниками</button>

  <table class="table" width="100%">
    <col style="width:30%">
    <col style="width:30%">
    <col style="width:30%">
    <col style="width:10%">
    <thead>
      <tr>
        <th>Идентификатор</th>        
        <th>Наименование</th>
        <th>Производитель</th>
        <th>Цена</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var product in productRepo.GetAll())
      {
        <tr>
          <td>@product.Id</td>          
          <td>@product.Name</td>
          <td>@manufacturer.Name</td>
          <td>@product.Price</td>
        </tr>
      }
    </tbody>
  </table>
      
}

@code {
  private WebService.Pages.UploadFile? _modal { get; set; }       
  Manufacturer manufacturer = new();

  protected override async Task OnInitializedAsync()
  {
    productRepo.Clear();    
    productRepo.AddRange(SQLService<Product>.GetAll());
    
    foreach (var product in productRepo.GetAll())
    {     
      manufacturer = manufacturerRepo.GetAll().Where(manuf => manuf.Id == product.ManufacturerId).ToList().FirstOrDefault();
    }
    await Task.Delay(0);
  }

  internal async Task SortByName()
  {    
    var sortedList = productRepo.SortedByName().ToList();
    SQLService<Product>.DeleteRange(productRepo.GetAll().ToList());
    SQLService<Product>.SaveRange(sortedList);
    await this.OnInitializedAsync();
  }

  internal async Task SortByPrice()
  {
    var sortedList = productRepo.SortedtByPrice().ToList();
    SQLService<Product>.DeleteRange(productRepo.GetAll().ToList());
    SQLService<Product>.SaveRange(sortedList);
    await this.OnInitializedAsync();
  }

  internal async Task PrintPriceTags()
  {
    
  }  
}