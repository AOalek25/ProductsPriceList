@inject NavigationManager NavigationManager

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="upload-container">
                  <div style="@(SelectedFilesCount > 0 ? "display: none" : string.Empty)">
                    <span class="drop-file-icon mb-3"></span>
                    <span class="mb-3">Click the Select Files button to select a file</span>
                  </div>
                  <DxUpload Name="myFile" UploadUrl="@GetUploadUrl("api/Upload/UploadFile/")" SelectedFilesChanged="SelectedFilesChanged"
                            AllowedFileExtensions="@(new List<string> { ".xls" })" MaxFileSize="4000000"
                            CssClass="@(SelectedFilesCount > 0 ? "w-100" : string.Empty)">
                  </DxUpload>
               </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                 <InputFile OnChange="@LoadFiles" multiple />
                 <a href="path_to_file" download>Save</a>
                 <a href="link_path_to_file" download="suggested_name">Save</a>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
  public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    internal void LoadFiles()
    {}

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

     int SelectedFilesCount { get; set; }
    protected void SelectedFilesChanged(IEnumerable<DevExpress.Blazor.UploadFileInfo> files) {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);
    }
    protected string GetUploadUrl(string url) {
        return NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
    }
}
