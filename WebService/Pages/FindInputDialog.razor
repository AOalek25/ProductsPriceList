@page "/findinputdialog"
@using ProductLibrary
@using ProductLibrary.Model
@using ProductLibrary.Exceptions
@using ExcelService

@inject ProductRepo repo
@inject NavigationManager NavigationManager

<h3>Введите данные для поиска.</h3>

<div class="row">
  <div class="col">
    <input class="form-control" placeholder="Введите наименование" @bind="name"></input>
  </div>
  <div class="col">
    <input class="form-control" placeholder="Введите производителя" @bind="manufacturer"></input>
  </div>
</div>

<button class="btn btn-primary" @onclick="Find">Найти</button>
<a href="pricelist" class="btn btn-primary">Назад</a>

<table class="table">
  <thead>
    <tr>
      <th>Идентификатор</th>
      <th>Наименование</th>
      <th>Производитель</th>
      <th>Цена</th>
    </tr>
  </thead>
  <tbody>    
    @if (findedProduct!= null)
    {
    <tr>
      <td>@findedProduct.Id</td>
      <td>@findedProduct.Name</td>
      <td>@findedProduct.Manufacturer</td>
      <td>@findedProduct.Price</td>
    </tr>
    }
  </tbody>
</table>

@code {
  public string name = "";
  public string manufacturer = "";
  ExcelService excelService = new(ExcelServiceConstants.BlazorData);  
  Product? findedProduct;

  internal void Find()
  {
    findedProduct = null;
    if (ReadStringNotValid(name)) throw new ValidationException($"Значение наименования невалидно.");
    if (ReadStringNotValid(manufacturer)) throw new ValidationException($"Значение производителя невалидно.");
    try
    {
      findedProduct = repo.Read(name, manufacturer);      
    }
    catch (ProductNotFoundException ex)
    { }    
  }

  static bool ReadStringNotValid(string param)
  {
    if (string.IsNullOrEmpty(param))
      return true;
    else return false;
  }
}
