@using ExcelService
@using ProductLibrary
@using ProductLibrary.Exceptions
@using ProductLibrary.Model

@inject NavigationManager NavigationManager
@inject ProductRepo repo
@inject IJSRuntime JS

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Загрузка файла</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <InputFile OnChange="@SingleUpload" />      
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@Accept">Подтвердить</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Отмена</button>                                 
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
  public string ModalDisplay = "none;";
  public string ModalClass = "";
  public bool generateReport = false;
  public bool ShowBackdrop = false;
  ExcelService excelService = new(ExcelServiceConstants.BlazorData);

  public void UploadNewFile()
  {    
    ModalDisplay = "block;";
    ModalClass = "Show";
    ShowBackdrop = true;
    StateHasChanged();
  }

  public void GenerateReport()
  {
    generateReport = true;
    ModalDisplay = "block;";
    ModalClass = "Show";
    ShowBackdrop = true;
    StateHasChanged();
  }

  public void Close()
  {
    ModalDisplay = "none";
    ModalClass = "";
    ShowBackdrop = false;
    StateHasChanged();    
  }

  private async Task SingleUpload(InputFileChangeEventArgs e)
  {    
    MemoryStream ms = new MemoryStream();
    try
    {
      await e.File.OpenReadStream().CopyToAsync(ms);
      var bytes = ms.ToArray();
      var fs = File.Create(Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.NewPriceListFileName));
      await fs.WriteAsync(bytes, 0, bytes.Length);
      fs.Close();
    }
    catch (IOException ex)
    { }
  }

  private async Task Accept()
  {
    if (generateReport)
    {
      List<Product> products = new();
      List<Product> newProducts = new();
      List<Product> comparisonResult = new();
      var ReportFilePath = Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.ReportFileName);
      var NewPriceListFilePath = Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.NewPriceListFileName);
      try
      {
        products = excelService.LoadFromFile(ExcelServiceConstants.BlazorData).ToList();        
        if (File.Exists(NewPriceListFilePath))
          newProducts = excelService.LoadFromFile(ExcelServiceConstants.BlazorData, ExcelServiceConstants.NewPriceListFileName).ToList();
        else throw new FileNotFoundException("Файл NewProductsPriceList не найден");
      }
      catch (IOException ex)
      { }
      foreach (Product product in products)
        foreach (Product newProduct in newProducts)
          if ((product.Name == newProduct.Name) && (product.Manufacturer == newProduct.Manufacturer) && (product.Price != newProduct.Price))
            comparisonResult.Add(newProduct);
          else continue;
      try
      {
        await excelService.SaveToFileAsync(comparisonResult, ExcelServiceConstants.BlazorData, ExcelServiceConstants.ReportFileName, ExcelServiceConstants.ReportSheetName);
        var fileStream = File.OpenRead(ReportFilePath);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", ExcelServiceConstants.ReportFileName, streamRef);
      }
      catch (IOException ex)
      { }
      this.NavigationManager.NavigateTo("/pricelist", true);
    }
    else
    {
      string src = Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.NewPriceListFileName);
      string dest = Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.PriceListFileName);
      try
      {
        File.Copy(src, dest, true);
        File.Delete(src);
      }
      catch (IOException ex)
      { }              
      this.NavigationManager.NavigateTo("/pricelist", true);
    }
  }
    
}
