@using ExcelService
@using ProductLibrary
@using ProductLibrary.Exceptions
@using ProductLibrary.Model

@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Загрузка файла</h5>                
            </div>
            <InputFile OnChange="@SingleUpload" required minlength="2" />
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@Accept">Подтвердить</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Отмена</button>                                 
            </div>
        </div>
    </div>
</div>

@if (_showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
  private string _modalDisplay = "none;";
  private string _modalClass = "";
  private bool _generateReport = false;
  private bool _showBackdrop = false;
  private ExcelService _excelService = new(ExcelServiceConstants.BlazorData);

  public void UploadNewFile()
  {    
    _modalDisplay = "block;";
    _modalClass = "Show";
    _showBackdrop = true;
    StateHasChanged();
  }

  public void GenerateReport()
  {
    _generateReport = true;
    _modalDisplay = "block;";
    _modalClass = "Show";
    _showBackdrop = true;
    StateHasChanged();
  }

  public void Close()
  {
    _modalDisplay = "none";
    _modalClass = "";
    _showBackdrop = false;
    StateHasChanged();    
  }

  private async Task SingleUpload(InputFileChangeEventArgs e)
  {    
    MemoryStream ms = new MemoryStream();
    try
    {
      await e.File.OpenReadStream().CopyToAsync(ms);
      var bytes = ms.ToArray();
      var fs = File.Create(Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.NewPriceListFileName));
      await fs.WriteAsync(bytes, 0, bytes.Length);
      fs.Close();
    }
    catch (FileNotFoundException ex)
    {
      await JS.InvokeVoidAsync("alert", ex.Message);
    }
    catch (InvalidOperationException ex)
    { 
      await JS.InvokeVoidAsync("alert", ex.Message);
    }
  }

  private async Task Accept()
  {
    if (_generateReport)
    {
      try
      {
        await _excelService.GenerateReport(ExcelServiceConstants.BlazorData);
        var ReportFilePath = Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.ReportFileName);
        var fileStream = File.OpenRead(ReportFilePath);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", ExcelServiceConstants.ReportFileName, streamRef);
      }
      catch (FileNotFoundException ex)
      {
        await JS.InvokeVoidAsync("alert", ex.Message);
      }
      catch (InvalidOperationException ex)
      {
        await JS.InvokeVoidAsync("alert", ex.Message);
      }
      this.NavigationManager.NavigateTo("/pricelist", true);
    }
    else
    {
      string src = Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.NewPriceListFileName);
      string dest = Path.Combine(ExcelServiceConstants.BlazorData, ExcelServiceConstants.PriceListFileName);
      try
      {
        File.Copy(src, dest, true);
        File.Delete(src);
      }
      catch (FileNotFoundException ex)
      {
        await JS.InvokeVoidAsync("alert", ex.Message);
      }
      catch (InvalidOperationException ex)
      {
        await JS.InvokeVoidAsync("alert", ex.Message);
      }
      this.NavigationManager.NavigateTo("/pricelist", true);
    }
  }    
}
