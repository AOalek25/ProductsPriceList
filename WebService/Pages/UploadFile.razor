@using ExcelService
@using ProductLibrary
@using ProductLibrary.Exceptions
@using ProductLibrary.Model

@inject NavigationManager NavigationManager
@inject ProductRepo repo
@inject IJSRuntime JS

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Загрузка файла</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <InputFile OnChange="@SingleUpload" />      
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@Accept">Подтвердить</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Отмена</button>                                 
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
//  public Guid Guid = Guid.NewGuid();
  public string ModalDisplay = "none;";
  public string ModalClass = "";
  public bool GenerateReport = false;  
  public bool ShowBackdrop = false;
  ExcelService excelService = new(WebServiceConstants.FilesDirectory);

  public void Open(bool generateReport)
  {
    GenerateReport = generateReport;
    ModalDisplay = "block;";
    ModalClass = "Show";
    ShowBackdrop = true;
    StateHasChanged();
  }

  public void Close()
  {
    ModalDisplay = "none";
    ModalClass = "";
    ShowBackdrop = false;
    StateHasChanged();    
  }

  private async Task SingleUpload(InputFileChangeEventArgs e)
  {    
    MemoryStream ms = new MemoryStream();
    await e.File.OpenReadStream().CopyToAsync(ms);
    var bytes = ms.ToArray();
    var fs = File.Create(Path.Combine(WebServiceConstants.FilesDirectory, ExcelServiceConstants.NewPriceListFileName));
    await fs.WriteAsync(bytes, 0, bytes.Length);
    fs.Close();    
  }

  private async Task Accept()
  {
    if (GenerateReport)
    {      
      List<Product> products = excelService.LoadFromFile(WebServiceConstants.FilesDirectory).ToList();
      List<Product> newProducts;
      if (File.Exists(Path.Combine(WebServiceConstants.FilesDirectory, ExcelServiceConstants.NewPriceListFileName)))
        newProducts = excelService.LoadFromFile(WebServiceConstants.FilesDirectory, ExcelServiceConstants.NewPriceListFileName).ToList();
      else throw new FileNotFoundException("Файл NewProductsPriceList не найден");
      List<Product> comparisonResult = new();
      foreach (Product product in products)
        foreach (Product newProduct in newProducts)
          if ((product.Name == newProduct.Name) && (product.Manufacturer == newProduct.Manufacturer) && (product.Price!=newProduct.Price))
            comparisonResult.Add(newProduct);      
      await excelService.SaveToFileAsync(comparisonResult, WebServiceConstants.FilesDirectory, ExcelServiceConstants.ReportFileName, ExcelServiceConstants.ReportSheetName);
      var fileStream = File.OpenRead(Path.Combine(WebServiceConstants.FilesDirectory, ExcelServiceConstants.ReportFileName));      
      using var streamRef = new DotNetStreamReference(stream: fileStream);
      await JS.InvokeVoidAsync("downloadFileFromStream", ExcelServiceConstants.ReportFileName, streamRef);
      this.NavigationManager.NavigateTo("/pricelist", true);
    }
    else
    {
      string src =Path.Combine(WebServiceConstants.FilesDirectory, ExcelServiceConstants.NewPriceListFileName);
      string dest = Path.Combine(WebServiceConstants.FilesDirectory, ExcelServiceConstants.PriceListFileName);
      File.Copy(src, dest, true);
      File.Delete(src);
      repo.Clear();
      foreach (var item in excelService.LoadFromFile(WebServiceConstants.FilesDirectory))
        repo.Create(item);
      this.NavigationManager.NavigateTo("/pricelist", true);
    }
  }
    
}
